#!/bin/sh /etc/rc.common
# SPDX-License-Identifier: GPL-3.0-only
# Copyright (C) 2019-2021 Tianling Shen <cnsztl@immortalwrt.org>

START=99
STOP=10

NAME="unblockneteasemusic"
UPGRADE_CONF="/lib/upgrade/keep.d/$NAME"

IPT_N="iptables -t nat"

is_enabled() {
	local enabled
	config_get enabled "$1" "$2" "0"
	if [ "$enabled" -eq "1" ]; then
		return 0
	else
		return 1
	fi
}

config_padding_arg() {
	local value
	config_get value "$1" "$2" $4
	[ -n "$value" ] && export $(eval echo "$2")="$3 $value"
}

append_param_env() {
	local value
	config_get value "$1" "$2"
	[ -n "$value" ] && export $(eval echo "$3")="$value"
}

uci_get_by_name() {
	local "index"
	index=0
	if [ -n "$4" ]; then
		index="$4"
	fi
	ret="$(uci get "$NAME".@"$1"["${index}"]."$2" 2>/dev/null)"
	echo "${ret:=$3}"
}

start()
{
	stop

	config_load "$NAME"
	is_enabled "config" "enable" || exit 1

	local update_time
	config_get update_time "config" "update_time" "3"
	sed -i "/$NAME/d" /etc/crontabs/root
	is_enabled "config" "auto_update" && echo "0 ${update_time} * * * /usr/share/$NAME/update.sh update_core" >> "/etc/crontabs/root"
	echo "*/5 * * * * /usr/share/$NAME/log_check.sh" >> "/etc/crontabs/root"
	/etc/init.d/cron restart > "/dev/null" 2>&1

	[ ! -e "/usr/share/$NAME/core/app.js" ] && { rm -f "/usr/share/$NAME/local_ver"; sh "/usr/share/$NAME/update.sh" "update_core_non_restart"; }
	[ ! -e "/usr/share/$NAME/core/app.js" ] && { echo "Core Not Found, please download it before starting." >> "/tmp/$NAME.log"; exit 1; }

	local http_port https_port hijack_ways
	config_get http_port "config" "http_port" "5200"
	config_get https_port "config" "https_port" "5201"
	config_get hijack_ways "config" "hijack_ways" "use_ipset"
	[ "${hijack_ways}" = "use_hosts" ] && { http_port="80"; https_port="443"; }

	local lan_addr
	lan_addr="$(uci get network.lan.ipaddr)"
	if is_enabled "config" "pub_access"; then
		listen_addr="0.0.0.0"

		iptables -I "INPUT" -p "tcp" --dport "${http_port}" -j "ACCEPT"
		iptables -I "INPUT" -p "tcp" --dport "${https_port}" -j "ACCEPT"
		echo "${http_port}:${https_port}" > "/tmp/$NAME.ports"

		mkdir -p "/var/etc/"
		echo "/etc/init.d/$NAME restart" > "/var/etc/$NAME.include"
	else
		listen_addr="${lan_addr}"
	fi

	local music_source
	config_get music_source "config" "music_source" "default"
	[ "${music_source}" != "default" ] && music_source="-o ${music_source}"

	is_enabled "config" "strict_mode" && strict_mode="-s"
	config_padding_arg "config" "endpoint_url" "-e" "https://music.163.com"
	config_padding_arg "config" "netease_server_ip" "-f"
	config_padding_arg "config" "proxy_server_ip" "-u"

	append_param_env "config" "migu_cookie" "MIGU_COOKIE"
	append_param_env "config" "qq_cookie" "QQ_COOKIE"
	append_param_env "config" "youtube_key" "YOUTUBE_KEY"
	append_param_env "config" "self_issue_cert_crt" "SIGN_CERT"
	append_param_env "config" "self_issue_cert_key" "SIGN_KEY"

	is_enabled "config" "enable_flac" && export ENABLE_FLAC="true"
	case "$(config_get "config" "replace_music_source")" in
		"lower_than_192kbps") export MIN_BR="192000" ;;
		"lower_than_320kbps") export MIN_BR="320000" ;;
		"lower_than_999kbps") export MIN_BR="999000" ;;
		"replace_all") export MIN_BR="999999" ;;
	esac

	node "/usr/share/$NAME/core/app.js" -a "${listen_addr}" -p "${http_port}":"${https_port}" ${music_source} ${endpoint_url} ${netease_server_ip} ${proxy_server_ip} ${strict_mode} >"/tmp/$NAME.log" 2>&1 &

	if [ "${hijack_ways}" = "use_ipset" ]; then
		mkdir -p "/tmp/dnsmasq.d"
		rm -f "/tmp/dnsmasq.d/dnsmasq-$NAME.conf"
		cat <<-EOF > "/tmp/dnsmasq.d/dnsmasq-$NAME.conf"
			dhcp-option=252,http://${lan_addr}:${http_port}/proxy.pac
			ipset=/.music.163.com/neteasemusic
			ipset=/interface.music.163.com/neteasemusic
			ipset=/interface3.music.163.com/neteasemusic
			ipset=/apm.music.163.com/neteasemusic
			ipset=/apm3.music.163.com/neteasemusic
			ipset=/clientlog.music.163.com/neteasemusic
			ipset=/clientlog3.music.163.com/neteasemusic
		EOF
		/etc/init.d/dnsmasq reload >"/dev/null" 2>&1

		if ! ipset list "acl_neteasemusic_http" > "/dev/null"; then ipset create "acl_neteasemusic_http" hash:ip; fi
		if ! ipset list "acl_neteasemusic_https" > "/dev/null"; then ipset create "acl_neteasemusic_https" hash:ip; fi
		ip_addr_num="$(uci show "$NAME" | grep -c "filter_mode")"
		let ip_addr_num="ip_addr_num-1"
		[ "${ip_addr_num}" -ge "0" ] && for i in $(seq 0 "${ip_addr_num}")
		do
			ip_addr="$(uci_get_by_name "acl_rule" "ip_addr" "" "$i")"
			filter_mode="$(uci_get_by_name "acl_rule" "filter_mode" "" "$i")"
			case "${filter_mode}" in
			"disable_http")
				ipset -! add "acl_neteasemusic_http" "${ip_addr}"
				;;
			"disable_https")
				ipset -! add "acl_neteasemusic_https" "${ip_addr}"
				;;
			"disable_all")
				ipset -! add "acl_neteasemusic_http" "${ip_addr}"
				ipset -! add "acl_neteasemusic_https" "${ip_addr}"
				;;
			esac
		done

		ipset list "neteasemusic" > "/dev/null" || ipset create "neteasemusic" hash:ip
		uclient-fetch -q -O- "http://httpdns.n.netease.com/httpdns/v2/d?domain=music.163.com,interface.music.163.com,interface3.music.163.com,apm.music.163.com,apm3.music.163.com,clientlog.music.163.com,clientlog3.music.163.com" |jsonfilter -e '@.data.*.ip.*' |sort -u |awk '{print "ipset add neteasemusic "$1}' |sh > "/dev/null" 2>&1
		$IPT_N -N "netease_cloud_music"
		for local_addr in "0.0.0.0/8" "10.0.0.0/8" "127.0.0.0/8" "169.254.0.0/16" "172.16.0.0/12" "192.168.0.0/16" "224.0.0.0/4" "240.0.0.0/4"; do
			$IPT_N -A "netease_cloud_music" -d "${local_addr}" -j "RETURN"
		done
		$IPT_N -A "netease_cloud_music" -p "tcp" -m "set" ! --match-set "acl_neteasemusic_http" "src" --dport "80" -j "REDIRECT" --to-ports "${http_port}"
		$IPT_N -A "netease_cloud_music" -p "tcp" -m "set" ! --match-set "acl_neteasemusic_https" "src" --dport "443" -j "REDIRECT" --to-ports "${https_port}"
		$IPT_N -I "PREROUTING" -p "tcp" -m "set" --match-set "neteasemusic" "dst" -j "netease_cloud_music"
		$IPT_N -I "KOOLPROXY" -m "set" --match-set "neteasemusic" "dst" -j "RETURN" -m "comment" --comment "KP for UnblockMusic"

		mkdir -p "/var/etc/"
		echo "/etc/init.d/$NAME restart" > "/var/etc/$NAME.include"
	elif [ "${hijack_ways}" = "use_hosts" ]; then
		mkdir -p "/tmp/dnsmasq.d"
		rm -f "/tmp/dnsmasq.d/dnsmasq-$NAME.conf"
		cat <<-EOF > "/tmp/dnsmasq.d/dnsmasq-$NAME.conf"
			dhcp-option=252,http://${lan_addr}:${http_port}/proxy.pac
			address=/music.163.com/${lan_addr}
			address=/interface.music.163.com/${lan_addr}
			address=/interface3.music.163.com/${lan_addr}
			address=/apm.music.163.com/${lan_addr}
			address=/apm3.music.163.com/${lan_addr}
			address=/clientlog.music.163.com/${lan_addr}
			address=/clientlog3.music.163.com/${lan_addr}
			address=/music.httpdns.c.163.com/0.0.0.0
		EOF
		/etc/init.d/dnsmasq reload >"/dev/null" 2>&1

		ip route add "223.252.199.10" dev lo
	fi
} >"/dev/null" 2>&1

stop()
{
	{ ps |grep "$NAME" |grep "app.js" |grep -v "grep" |awk '{print $1}' |xargs kill -9; } > "/dev/null" 2>&1

	config_load "$NAME"

	sed -i "/$NAME/d" "/etc/crontabs/root"
	/etc/init.d/cron restart > "/dev/null" 2>&1

	[ -f "${UPGRADE_CONF}" ] && sed -i "/$NAME\/core/d;/$NAME\/local_ver/d" "${UPGRADE_CONF}"
	is_enabled "config" "keep_core_when_upgrade" && { echo "/usr/share/$NAME/core/" >> "${UPGRADE_CONF}"; echo "/usr/share/$NAME/local_ver" >> "${UPGRADE_CONF}"; }

	local self_issue_cert_crt self_issue_cert_key
	config_get "self_issue_cert_crt" "config" "self_issue_cert_crt"
	config_get "self_issue_cert_key" "config" "self_issue_cert_key"
	{ [ -f "${self_issue_cert_crt}" ] && [ -f "${self_issue_cert_key}" ]; } && {
		sed -i "/${self_issue_cert_crt//\//\\/}/d" "${UPGRADE_CONF}"
		sed -i "/${self_issue_cert_key//\//\\/}/d" "${UPGRADE_CONF}"

		echo "${self_issue_cert_crt}" >> "${UPGRADE_CONF}"
		echo "${self_issue_cert_key}" >> "${UPGRADE_CONF}"
	}

	http_port="$(cat "/tmp/$NAME.ports" | awk -F ':' 'print $1')"
	https_port="$(cat "/tmp/$NAME.ports" | awk -F ':' 'print $2')"
	iptables -D "INPUT" -p "tcp" --dport "${http_port}" -j "ACCEPT"
	iptables -D "INPUT" -p "tcp" --dport "${https_port}" -j "ACCEPT"

	$IPT_N -D "PREROUTING" -p "tcp" -m set --match-set "neteasemusic" "dst" -j "netease_cloud_music"
	$IPT_N -D "KOOLPROXY" -m "set" --match-set "neteasemusic" "dst" -j "RETURN" -m "comment" --comment "KP for UnblockMusic"
	$IPT_N -F "netease_cloud_music"
	$IPT_N -X "netease_cloud_music"
	ipset destroy "neteasemusic"
	ipset destroy "acl_neteasemusic_http"
	ipset destroy "acl_neteasemusic_https"
	echo "" > "/var/etc/$NAME.include"

	rm -f "/tmp/dnsmasq.d/dnsmasq-$NAME.conf"
	/etc/init.d/dnsmasq reload >"/dev/null" 2>&1
	ip route del "223.252.199.10"

	rm -f "/tmp/$NAME.log"
} >"/dev/null" 2>&1
